Author Note:

This file has been modified to remove grading and course-related instructions,
as well as author identifiers.

================================================================================
Project Overview
================================================================================
Purpose:
  The purpose of the project is to give you a chance to work on a significant
    (and hopefully enjoyable) programming assignment that incorporates much of
    the knowledge and skill you have learned throughout the course.

Overview:
  The goal of this assignment is for you to write Scheme
    code to play one player's part in a game called "PhageWars++". PhageWars++
    is based on a popular online real-time strategy game, Phage Wars.
    PhageWars++ is a two-person game involving a number of cells placed on a
    rectangular board. Each cell is owned by one of the players, or may begin
    the game without an owner. The goal of the game is for one player to
    eliminate all cells owned by the other player.

    Many parts of this game are already written, and it is already playable by
    humans. Your task is to write an AI player, which examines the board data
    and makes strategic moves each turn in an attempt to win the game.

    The remainder of this file contains details about the rules of the game,
    the referee code, and how your code will be graded.


Files:
  Here is a list and explanation of the files supplied for this
    project.  You should copy, rename, and modify the random.scm file
    below; This is where you should write your player code. The other
    files mentioned here are files containing referee or informational
    code. You do not need to understand all these other files in detail, and
    should not modify them. However, as explained below, these other files
    contain some information, such as data formats or information accessors,
    and you may need to use these functions when writing your player code.
    If you want to MODIFY any of the code in the following files, copy it into
    your AI file with a new name, as we will not use your copy of these files.
    You should not need to copy any functions from these files to make calls
    with them in your AI.

  PhageWars++.scm -- This file contains the "referee" code that keeps track of
    the current status of the board and queue, and gets moves from each player.
    It also handles the displaying of the board and checks against illegal
    moves. It will call your player-procedure with a copy of the current board
    and wait for your move to be returned.

    Also included in this file are constants that specify game parameters. You
    will be able to read these values from within your file. Generally, these
    are denoted between asterisks, such as *BOARD-WIDTH*.

    Finally, when PhageWars++.scm is loaded into scheme, all of the following
    files are also loaded.  You only need to load PhageWars++.scm to play the
    game.

  help.scm -- This file contains all of the game-specific helper code used by
    PhageWars++.scm. Nearly everything you might want to interact with the board
    and queue, create/use abstractions, and to lookup information on the state
    of the game is there.

    PhageWars++ loads this file, so you will have access to these procedures
    through the global environment.

  util.scm -- This file contains general utility functions. These procedures are
    occasionally used by the referee, but are much more generalized than the
    procedures in help.scm - they are not game-specific.

    PhageWars++.scm loads this file, so you will have access to these procedures
    through the global environment.

  maps.scm -- This file contains map and board data, and corresponds to the map
    selection preferences in PhageWars++. The map options are versatile, and
    are intended for customization should you so choose. Ideally, they may be
    customized as a tool for testing your AI's functionality.

    PhageWars++.scm loads this file, so you will have access to all the maps
    defined herein through the global environment.

  random.scm -- This file is a very simple player that makes a single move at
    random. You should copy / rename this file and use it as a template for your
    code. All code you write should be inside the player-procedure definition
    provided by random.scm.

    random.scm, as well as any other specified player procedure, is loaded
    when you pass the filename in as an argument to the "play-game" procedure.



Description and Rules
================================================================================
Game Overview:
  PhageWars++ is an adaptation of a series of online real-time strategy games,
    most commonly recognized under the title Phage Wars. In this game, there
    exists a board which contains several numbered cells. Each cell has an
    owner, either Player 1, Player 2, or Neutral (not yet owned). The goal of
    the game is for one player to eliminate all of the cells owned by the other
    player. On each turn, players will be asked to make at most one move for
    each of their cells. Then, the game will process the moves made by each
    player, based on the board layout. Finally, each cell owned by a player is
    given more units based on its cell growth (explained below), and the cycle
    repeats.


Rules:
  There are two players, player 1 and player 2. Each player can either be a
    human or an AI. For the game, there exists a board which is populated with
    cells, and a priority queue which is used to track and display moves as they
    travel across the board.

The Game Cycle:
  Each turn consists of four steps, which are repeated until a winner is
    declared. Each step of the game is outlined below:

    -Both players are given a copy of the board and queue, and return a
       list of moves they would like to make on this turn.
    -Both lists of moves are integrated into the queue, based on the distance
       each move must travel to reach its destination.
    -The queue is advanced, based on the movement speed of the map. Any moves
       that reach their destination attack or reinforce that cell, based on
       distance traveled and the order in the queue.
    -All cells owned by players are given more units, based on their income
       and their actions in the previous turn.


The Board:
  All boards are specified by a map, explained in the maps.scm file.  Each board
    has a set height and width, which vary between the different maps.
    Initially, the board is typically populated with one cell (sometimes
    multiple cells) owned by each player, and several neutral cells.  The cell
    information may also vary between maps.  Each cell also has a unit count,
    and a value representing income. As the game progresses, the cells will
    change owners and unit count.

  The following board segment contains three cells, labeled C1, C2 and C3 (when
    interacting with the board, they are simply 1 2 and 3). C1 is owned by
    player 1, and contains 29 units. Each turn, 5 units are added to that unit
    count. C2 is owned by player 2, only has 23 units, but again adds 5 units
    per turn. C3 is also owned by player 2, contains 29 units, but only has a
    growth of 3 units per turn.

        *-------*       *       *       *
        | C1:+5 |
        | P1:29 |
        *-------*       *       *-------*
                                | C2:+5 |
                                | P2:23 |
        *       *       *       *-------*
                          06:C2
                            P2
        *-------*       *       *       *
        | C3:+3 |
        | P2:29 |
        *-------*       *       *       *

  There is also a displayed move on the board. This move is shown as the
    borderless set of characters. This move is heading towards cell 2, contains
    6 units, and is owned by player 2. Moves displayed on the board are
    estimations based on distance, designed to give human players and observers
    a "feel" for the current game state. For accurate information, the queue
    should always be used as the point of reference. Your AIs will use the queue
    to obtain information about all the moves currently in play, as they cannot
    access the moves displayed on the board.


The Queue:
  The queue for the game is more of a sorted list. After both players' moves
    are collected by the referee, they are inserted into the queue based on the
    distance they must travel between cells. The "front" of the queue has moves
    which have the smallest distance left to travel, while the last items in
    the queue have the longest distance left to travel. Moves submitted by the
    player have been tagged 'move, while moves in the queue have the
    'queued-move tag.

        Example:
        .=Queue==================================================Speed: 2=.
        |  08:C5 | 08:C2 | 06:C6 | 06:C2 |                                |
        |  P1:01 | P2:01 | P1:01 | P2:02 |                                |
        `=Enrage: 1.0============================================Turn: 3==`

  This queue contains four moves. The first number (08, 08, 06, 06) is the
    number of units being sent with that move. The second value on the top line
    is the destination cell of the move. The first value on the second line is
    the player who sent the move, and the last value in the bottom right is the
    number of turns until that move is executed. When moves are executed, they
    do so in the order listed in the queue. Thus, the first move to be executed
    would be against cell 5, then the move against cell two, and finally the
    move against cell 6.

  On the next turn, the queue may look like this:
        .=Queue==================================================Speed: 2=.
        |  06:C2 |  05:C3 |                                               |
        |  P2:01 |  P1:03 |                                               |
        `=Enrage: 1.0============================================Turn: 4==`

  The first three moves from the first queue were executed, while the fourth
    move has only one turn remaining. Player one added a move to the queue,
    sending 5 units to cell 3. Unfortunately, it will take three turns until
    this new move reaches its destination.

  Note that the queue displays some other useful information, such as the
    "enrage" modifier, the board speed (squares per turn), and the current turn.
    These values are also readily available to any AI player, and are discussed
    in detail below.

Making Moves:
  On each turn, your AI will be prompted to return a list of moves. This
    list can be any set of possible moves from the empty list to as many as
    one move from each cell you own. The format for moves is described in
    the help file. If your AI returns multiple moves with the same origin cell,
    it will be considered an invalid move and you will lose the game.
    An example of a legitimate return value on a board where your player
    controls cell 1, and there is a cell 2, would be made with:
    (list (make-move 1 2))
    Note that even if you make no moves (all owned cells defend), you should
    return an empty list.

Distance and Board Spacing:
  Distance on the board is calculated with standard geometry, so a cell at
    (1, 1) attacking a cell at (4, 5), will have it's units travel a distance of
    (sqrt (+ (square (- 1 4)) (square (- 1 5)))), or (sqrt (+ 9 16)), or 5.
    Thus, if the move-speed for the map is 3, it will arrive on the second turn
    after making the move.

Reinforcement:
  Not only can cells you own attack other cells, but they can also send half
    their unit count to a cell you control. This is useful in preventing your
    opponent from taking a cell you own (if you anticipate or see the attack),
    which denies them even a single turn of growing more units.

Unit Growth
  As was previously mentioned, each cell has an income value (represented
    with a "+" prefixing a number) which tells players how many units they will
    receive during a growth phase.

  If the owner of a cell decides not to send units from it, it will gain a few
    extra units for defending.  The defenders bonus will always be 2 units, but
    your AI can read this value as a board variable.

Map Constants:
  Aside from board and queue initialization, maps can specify several other
    pieces of information. Map formatting is described in maps.scm, however a
    few useful pieces of information are mentioned below.
      -Move Speed is specified by each map, or it is set to a default.
      -Enrage data is specified by each map, or it is set to a default.
      -The growth rate of each cell is specified by the initial board.

Enrage Timers:
  One interesting addition to the game is the idea of a gradual "enrage timer."
    Displayed on the board, and easily accessible through the help files, the
    enrage value is a number which is multiplied to all dispatched units.

  The typical setup for an enrage value is to increase the outgoing unit count
    by 10% every 10 turns. What this means for your AI is that when you attack
    an enemy cell, it sends 110% of the cells normally sent, without losing 10%
    more of your defenders. In a sense, it's like getting free units to attack.
    This exists for maps so that there is no "stalemate" situation between two
    AIs - eventually, the enrage bonus will get high enough that most attacks
    will be extremely hard, if not impossible to defend against. This typically
    takes several turns, possibly stretching into the hundreds.

  Note - While the enrage bonus is applied when a move is put in the queue, if
    the targeted cell ends up being controlled by the same player (i.e. the
    player is reinforcing one of their cells), the enrage bonus will be removed.
    Thus, players cannot take advantage of this to artificially inflate their
    own cells.

Time Limit:
  Players must return moves in a timely fashion to avoid delay-of-game
    forfeiture. The time limit for each player on each turn will be no less than
    two seconds, but may be increased for maps containing many cells.

  If your AI exceeds this limit, you will lose some points for the grading.

  Exceeding this limit during the round-robin qualifiers for the tournament will
    disqualify you from the tournament, REGARDLESS of how well your AI does.
    Exceeding this limit during the tournament will also result in immediate
    disqualification.

  You are encouraged to emphasize strategy, as opposed to spending lots of time
    generating a game tree of possible moves and responses. AIs that work by
    attempting to predict many possible moves for future turns are time
    consuming, and the time limit exists to both discourage this type of AI, and
    to keep the game moving.

Maps and Variations:
  The provided maps are all "standard" maps which you may see in the tournament
    and for grading. We may run other maps for grading or for the tournament,
    so do not build an AI to ONLY run on these maps. However, the board layout
    concepts provided by the given 'map pack' should illustrate several
    variations which will be found in the final selection of maps.

Writing Your Code:
  To do this project you do NOT need to understand the referee code in
    'PhageWars++.scm' (However, understanding the game code may help you write
    your own procedures.)  Your job is to write just a player-procedure. Your
    procedure will be called by, but be independent of, the referee code. This
    means your code will not have access to any of the referee code's local
    procedures or local data, and vice versa. We suggest that you begin by using
    the random player code and some of the procedures found in help.scm and
    util.scm files.

  Any additional procedures you write must be made local to (i.e., nested
    inside) your player-procedure. You are also free to use any of the code from
    the text, from the class web page, or from your own previous assignments.
    But, for any code you reuse you must include comments indicating the source
    of the code. A reminder, the ONLY file you will submit is your-AI.scm
    file. This means that any modifications to any other file (help, maps, etc)
    will not be available to your AI when we begin running your code.


Running the Game (Referee):
  The game can be set up for 2 human players, 2 computer players, or 1 of each
    with the computer being either the first or second player. The first player
    procedure loaded becomes Player 1. After loading "PhageWars++.scm" into
    Scheme, you can start the game with any combination of human and computer
    players using (play-game ...). Some examples follow:

      (play-game 'human 'human) will start PhageWars++ with two interactive
        players.

      (play-game "random.scm" 'human) will start PhageWars++ with Player 1 as
        the computer random player found in file "random.scm" and an
        interactive, human player for Player 2.

      (play-game "yourcode.scm" "random.scm") will start PhageWars++ with
        Player 1 as the player-procedure your wrote found in a file named
        "yourcode.scm" and Player 2 as the random player procedure.

  Note that the player procedures should be in the same directory where you are
    running PhageWars++.scm.  You should only need to load PhageWars++.scm
    before calling (play-game x y) - PhageWars++.scm will load all needed helper
    files.

Developer Information and Credits:
  This game is modeled after a popular online flash game, Phage Wars. Phage Wars
    was developed by Joey Betz. All credit regarding the inspiration of
    PhageWars++, including the naming, rules and initial concepts comes from
    Joey's Phage Wars game. It has been dramatically altered in the process of
    creating and editing it to its current state; however none of this would
    have been possible without Joey's game.
